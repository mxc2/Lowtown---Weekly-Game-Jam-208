<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_character_trampoline</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>w_spd = 2;
n_spd = 4;
r_spd = 5;
spd = n_spd;

//Textbox radius
radius = 16;
global.PickupRadius = 32;
global.active_textbox = noone;

//Details
portrait_index = 2;
voice = typing;
name = "Player";

//Pickup variables
global.picked_up_trampolene = 0;

image_speed = 0.15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Update Input
input_left = keyboard_check(vk_left);
input_right = keyboard_check(vk_right);
input_up = keyboard_check(vk_up);
input_down = keyboard_check(vk_down);
input_walk = keyboard_check(vk_control);
input_run = keyboard_check(vk_shift);

global.input_interact = keyboard_check_pressed(ord("E"));

hInput = keyboard_check(vk_right) - keyboard_check(vk_left);
vInput = keyboard_check(vk_down) - keyboard_check(vk_up);

if(hInput != 0 or vInput != 0){
    dir = point_direction(0,0,hInput,vInput);
    moveX = lengthdir_x(spd, dir);
    moveY = lengthdir_y(spd, dir);

    x += hInput * spd;
    y += vInput * spd;
    

}

if(keyboard_check(vk_up)){
    sprite_index = spr_character_up;
    image_speed = 0.25;
}
else if(keyboard_check(vk_down)){
    sprite_index = spr_character_down;
    image_speed = 0.20;
}
else if(keyboard_check(vk_right)){
    sprite_index = spr_character_right;
    image_speed = 0.25;
}
else if(keyboard_check(vk_left)){
    sprite_index = spr_character_left;
    image_speed = 0.25;
} else {
    sprite_index = spr_character;
    image_speed = 0.15;
}


if keyboard_check(vk_escape)
    {
        game_end();
    }
    
//Textbox
if(global.input_interact){
    
    if(global.active_textbox == noone){
    
        var inst = collision_rectangle(x-radius, y-radius, x+radius, y+radius, obj_parent, false, false);
        
        if(inst == noone){
            instance_destroy(obj_textbox);
        }
        
        if(inst != noone){
            with(inst){
                var tbox = create_textbox(text, speakers);
                can_move = false;
                moveX = 0; moveY = 0;
            }
            global.active_textbox = tbox;
        }
    }
}

//Check if in range
//If not
if !collision_rectangle(x-radius, y-radius, x+radius, y+radius, obj_parent, false, false)
   {
        //Delete textbox
        instance_destroy(obj_textbox);
        global.active_textbox = noone;
   }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_collision">
      <action>
        <libid>1</libid>
        <id>115</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_bounce</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var str;
switch (irandom(2)){

case 0: str = "ttes";
case 1: str = "ttes";
case 2: str = "ttes";

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
