<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_character</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hspd = 4;
vspd = 4;

//Textbox radius
global.radius = 48;
global.PickupRadius = 32;
global.active_textbox = noone;

//Details
portrait_index = 2;
voice = typing;
name = "Player";

//Pickup variables
global.picked_up_trampolene = 0;
global.picked_up_glass = 0;

//AnimationTe    speed
image_speed = 0.15;

global.placed_object_2 = 0;
global.completed_dialog = 0;
global.finished_first_objective = 0;
global.finished_second_objective = 0;
global.finished_third_objective = 0;
global.picked_up_crate = 0;
global.picked_up_hammer = 0;

global.gotobjective = 0;


////Special obj_ai_3_halfway
global.NotRun = 0;
global.NotRun2 = 0;


audio_sound_gain(click, 0.5, 0);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>211</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_sound</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>6</kind>
            <sound>background</sound>
          </argument>
          <argument>
            <kind>3</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_sound_gain(background, 0.3, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Update Input
input_left = keyboard_check(vk_left);
input_right = keyboard_check(vk_right);
input_up = keyboard_check(vk_up);
input_down = keyboard_check(vk_down);
input_walk = keyboard_check(vk_control);
input_run = keyboard_check(vk_shift);

global.input_interact = keyboard_check_pressed(ord("E"));
global.input_interact2 = keyboard_check_pressed(ord("F"));

hInput = keyboard_check(vk_right) - keyboard_check(vk_left);
vInput = keyboard_check(vk_down) - keyboard_check(vk_up);

if (global.nomovement == 0){

    if(hInput != 0 or vInput != 0){
        dir = point_direction(0,0,hInput,vInput);
        moveX = lengthdir_x(hspd, dir);
        moveY = lengthdir_y(vspd, dir);
    
        x += hInput * hspd;
        y += vInput * vspd;
        
        if (!audio_is_playing(walk) &amp;&amp; (!audio_is_playing(walk2))){
            if(!audio_is_playing(walk2)){
                audio_play_sound(walk, 10, false);
            }
            if(!audio_is_playing(walk)){
                audio_play_sound(walk2, 10, false);
            }
            audio_sound_gain(walk, 0.15, 0);
            audio_sound_gain(walk2, 0.15, 0);
        }
    }
}
//Check collision
//Horizontal collisions
if place_meeting(x+hspd,y,obj_collision) {
        while !place_meeting(x+sign(hspd),y,obj_collision) {
                 x += sign(hspd);
        }
        //hspd = 0;
        move_bounce_all(true);
        sprite_index = spr_character;
        image_speed = 0.15;
}

//Vertical collisions
if place_meeting(x,y+vspd,obj_collision) {
        while !place_meeting(x,y+sign(vspd),obj_collision) {
                 y += sign(vspd);
        }
        //vspd = 0;
        move_bounce_all(true);
        sprite_index = spr_character;
        image_speed = 0.15;
}

if((global.picked_up_trampolene == 0) &amp;&amp; (global.picked_up_glass == 0) &amp;&amp; (global.picked_up_hammer == 0) &amp;&amp; global.nomovement != 1){
    if(keyboard_check(vk_up)){
        sprite_index = spr_character_up;
        image_speed = 0.25;
    }
    else if(keyboard_check(vk_down)){
        sprite_index = spr_character_down;
        image_speed = 0.20;
    }
    else if(keyboard_check(vk_right)){
        sprite_index = spr_character_right;
        image_speed = 0.15;
    }
    else if(keyboard_check(vk_left)){
        sprite_index = spr_character_left;
        image_speed = 0.15;
    } else {
        sprite_index = spr_character;
        image_speed = 0.15;
        audio_sound_gain(walk, 0, 0);
        audio_sound_gain(walk2, 0, 0);
    }
} else if(global.picked_up_trampolene == 1){

    if(keyboard_check(vk_up)){
        sprite_index = spr_character_up_trampoline;
        image_speed = 0.25;
    }
    else if(keyboard_check(vk_down)){
        sprite_index = spr_character_down_trampoline;
        image_speed = 0.20;
    }
    else if(keyboard_check(vk_right)){
        sprite_index = spr_character_right_trampoline;
        image_speed = 0.15;
    }
    else if(keyboard_check(vk_left)){
        sprite_index = spr_character_left_trampoline;
        image_speed = 0.25;
    } else {
        sprite_index = spr_character_trampoline;
        image_speed = 0.15;
        audio_sound_gain(walk, 0, 0);
        audio_sound_gain(walk2, 0, 0);
}
} else if(global.picked_up_glass == 1){
    if(keyboard_check(vk_up)){
        sprite_index = spr_character_up_glass;
        image_speed = 0.25;
    }
    else if(keyboard_check(vk_down)){
        sprite_index = spr_character_down_glass;
        image_speed = 0.20;
    }
    else if(keyboard_check(vk_right)){
        sprite_index = spr_character_right_glass;
        image_speed = 0.15;
    }
    else if(keyboard_check(vk_left)){
        sprite_index = spr_character_left_glass;
        image_speed = 0.25;
    } else {
        sprite_index = spr_character_glass;
        image_speed = 0.15;
        audio_sound_gain(walk, 0, 0);
        audio_sound_gain(walk2, 0, 0);
}
} else if(global.picked_up_hammer == 1){
    if(keyboard_check(vk_up)){
        sprite_index = spr_character_hammer_up;
        image_speed = 0.25;
    }
    else if(keyboard_check(vk_down)){
        sprite_index = spr_character_hammer_down;
        image_speed = 0.20;
    }
    else if(keyboard_check(vk_right)){
        sprite_index = spr_character_hammer_right;
        image_speed = 0.15;
    }
    else if(keyboard_check(vk_left)){
        sprite_index = spr_character_hammer_left;
        image_speed = 0.25;
    } else {
        sprite_index = spr_character_hammer;
        image_speed = 0.15;
        audio_sound_gain(walk, 0, 0);
        audio_sound_gain(walk2, 0, 0);
}
}


if ((keyboard_check(vk_escape) &amp;&amp; (global.nomovement == 0)))
    {   
        audio_play_sound(click, 10, false);
        instance_create(obj_character, obj_character, obj_quit);
    }
    
//Textbox
if(global.input_interact){
    
    if(global.active_textbox == noone){
    
        var inst = collision_rectangle(x-global.radius, y-global.radius, x+global.radius, y+global.radius, obj_parent, false, false);
        
        if(inst == noone){
            
            instance_destroy(obj_textbox);
        }
        
        if(inst != noone){
            with(inst){
                var tbox = create_textbox(text, speakers);
                can_move = false;
                moveX = 0; moveY = 0;
            }
            global.active_textbox = tbox;
        }
    }
}

//Check if in range
//If not

if (collision_rectangle(x-global.radius, y-global.radius, x+global.radius, y+global.radius, obj_parent, false, false)){
        
        if(global.connected_to_trampoline == 0){
        
            //instance_create(x,y,obj_action_chat);
        
        }
        
        if(global.picked_up_glass == 1){
        
            instance_create(x,y,obj_action_putdownandchat_3);
        }
        
        global.connected_to_ai = 1;
        
} else if !collision_rectangle(x-global.radius, y-global.radius, x+global.radius, y+global.radius, obj_parent, false, false)
   {    
        //set that player can only put down object
        global.connected_to_ai = 0;     
   
        //Delete textbox
        instance_destroy(obj_action_chat);
        instance_destroy(obj_textbox);
        global.active_textbox = noone;
   }

//Audio
if collision_rectangle(x-global.radius, y-global.radius, x+global.radius, y+global.radius, obj_sound, false, false){
    
    audio_sound_gain(wind, 0.055, 0);
    audio_play_sound(wind, 5, false);    

}

///////////////////////////////////////
/////////////CAMPER////////////////////

if !collision_rectangle(x-global.radius, y-global.radius, x+global.radius, y+global.radius, obj_ai_3_halfway, false, false){

    //instance_destroy(obj_action_putdownandchat);

}

///////////////////////////////////////
//FENCE COLLISIONS
//Horizontal collisions
if place_meeting(x+hspd,y,obj_fence_test) {
        while !place_meeting(x+sign(hspd),y,obj_fence_test) {
                 x += sign(hspd);
        }
        //hspd = 0;
        move_bounce_all(true);
}

//Vertical collisions
if place_meeting(x,y+vspd,obj_fence_test) {
        while !place_meeting(x,y+sign(vspd),obj_fence_test) {
                 y += sign(vspd);
        }
        //vspd = 0;
        move_bounce_all(true);
}
//Horizontal collisions
if place_meeting(x+hspd,y,obj_fence_topdown) {
        while !place_meeting(x+sign(hspd),y,obj_fence_topdown) {
                 x += sign(hspd);
        }
        //hspd = 0;
        move_bounce_all(true);
}

//Vertical collisions
if place_meeting(x,y+vspd,obj_fence_topdown) {
        while !place_meeting(x,y+sign(vspd),obj_fence_topdown) {
                 y += sign(vspd);
        }
        //vspd = 0;
        move_bounce_all(true);
}

//Horizontal collisions
if place_meeting(x+hspd,y,obj_fence_water_side) {
        while !place_meeting(x+sign(hspd),y,obj_fence_water_side) {
                 x += sign(hspd);
        }
        //hspd = 0;
        move_bounce_all(true);
}

//Vertical collisions
if place_meeting(x,y+vspd,obj_fence_water_side) {
        while !place_meeting(x,y+sign(vspd),obj_fence_water_side) {
                 y += sign(vspd);
        }
        //vspd = 0;
        move_bounce_all(true);
}
//Horizontal collisions
if place_meeting(x+hspd,y,obj_fence_water) {
        while !place_meeting(x+sign(hspd),y,obj_fence_water) {
                 x += sign(hspd);
        }
        //hspd = 0;
        move_bounce_all(true);
}

//Vertical collisions
if place_meeting(x,y+vspd,obj_fence_water) {
        while !place_meeting(x,y+sign(vspd),obj_fence_water) {
                 y += sign(vspd);
        }
        //vspd = 0;
        move_bounce_all(true);
}
//TREE
//Horizontal collisions
if place_meeting(x+hspd,y,obj_green_tree_B) {
        while !place_meeting(x+sign(hspd),y,obj_green_tree_B) {
                 x += sign(hspd);
        }
        //hspd = 0;
        move_bounce_all(true);
}

//Vertical collisions
if place_meeting(x,y+vspd,obj_green_tree_B) {
        while !place_meeting(x,y+sign(vspd),obj_green_tree_B) {
                 y += sign(vspd);
        }
        //vspd = 0;
        move_bounce_all(true);
}

//TREE
//Horizontal collisions
if place_meeting(x+hspd,y,obj_Dgreen_tree) {
        while !place_meeting(x+sign(hspd),y,obj_Dgreen_tree) {
                 x += sign(hspd);
        }
        //hspd = 0;
        move_bounce_all(true);
}

//Vertical collisions
if place_meeting(x,y+vspd,obj_Dgreen_tree) {
        while !place_meeting(x,y+sign(vspd),obj_Dgreen_tree) {
                 y += sign(vspd);
        }
        //vspd = 0;
        move_bounce_all(true);
}

//HAY
//Horizontal collisions
if place_meeting(x+hspd,y,obj_hay) {
        while !place_meeting(x+sign(hspd),y,obj_hay) {
                 x += sign(hspd);
        }
        //hspd = 0;
        move_bounce_all(true);
}

//Vertical collisions
if place_meeting(x,y+vspd,obj_hay) {
        while !place_meeting(x,y+sign(vspd),obj_hay) {
                 y += sign(vspd);
        }
        //vspd = 0;
        move_bounce_all(true);
}

//MOO
//Horizontal collisions
if place_meeting(x+hspd,y,obj_cow) {
        while !place_meeting(x+sign(hspd),y,obj_cow) {
                 x += sign(hspd);
        }
        //hspd = 0;
        move_bounce_all(true);
}

//Vertical collisions
if place_meeting(x,y+vspd,obj_cow) {
        while !place_meeting(x,y+sign(vspd),obj_cow) {
                 y += sign(vspd);
        }
        //vspd = 0;
        move_bounce_all(true);
}

//MOO
//Horizontal collisions
if place_meeting(x+hspd,y,obj_crate) {
        while !place_meeting(x+sign(hspd),y,obj_crate) {
                 x += sign(hspd);
        }
        //hspd = 0;
        move_bounce_all(true);
}

//Vertical collisions
if place_meeting(x,y+vspd,obj_crate) {
        while !place_meeting(x,y+sign(vspd),obj_crate) {
                 y += sign(vspd);
        }
        //vspd = 0;
        move_bounce_all(true);
}

//ai4
//Horizontal collisions
if place_meeting(x+hspd,y,obj_ai_4) {
        while !place_meeting(x+sign(hspd),y,obj_ai_4) {
                 x += sign(hspd);
        }
        //hspd = 0;
        move_bounce_all(true);
}

//Vertical collisions
if place_meeting(x,y+vspd,obj_ai_4) {
        while !place_meeting(x,y+sign(vspd),obj_ai_4) {
                 y += sign(vspd);
        }
        //vspd = 0;
        move_bounce_all(true);
}

//ai3
//Horizontal collisions
if place_meeting(x+hspd,y,obj_ai_3) {
        while !place_meeting(x+sign(hspd),y,obj_ai_3) {
                 x += sign(hspd);
        }
        //hspd = 0;
        move_bounce_all(true);
}

//Vertical collisions
if place_meeting(x,y+vspd,obj_ai_3) {
        while !place_meeting(x,y+sign(vspd),obj_ai_3) {
                 y += sign(vspd);
        }
        //vspd = 0;
        move_bounce_all(true);
}


//Goto ROOM
//Horizontal collisions
if place_meeting(x+hspd,y,obj_goroom) {
        while !place_meeting(x+sign(hspd),y,obj_goroom) {
                 x += sign(hspd);
        }
        var rm = asset_get_index("room1");
        room_goto(rm);
}

//Vertical collisions
if place_meeting(x,y+vspd,obj_goroom) {
        while !place_meeting(x,y+sign(vspd),obj_goroom) {
                 y += sign(vspd);
        }
        var rm = asset_get_index("room1");
        room_goto(rm);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_ai">
      <action>
        <libid>1</libid>
        <id>115</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_bounce</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var str;
switch (irandom(2)){

case 0: str = "ttes";
case 1: str = "ttes";
case 2: str = "ttes";

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
